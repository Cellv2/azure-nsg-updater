@page "/nsg-info"

@using Microsoft.Identity.Web
@using AzureNsgUpdater.Data
@using Microsoft.Azure.Management.Network.Fluent
@using System.Text.RegularExpressions

@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject INetworkSecurityGroupService NetworkSecurityGroupService

<h3>NsgInfo</h3>

@if (networkSecurityGroupPageDataList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Network Security Groups</h1>
    <div>
        <label for="ipAddressInput" class="form-label">IP Address</label>
        <input type="text"
               id="ipAddressInput"
               class="form-control @((isIpAddressValid) ? "is-valid" : "is-invalid")"
               aria-describedby="validateIpAddressFeedback"
               required
               @bind="@ipAddress"
               @oninput="(args) => setInputIpAddressValue(args.Value.ToString())" />

        <div id="validateIpAddressFeedback" class="invalid-feedback">
            Please enter a valid IP address (CIDR notation not currently accepted)
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>NSG Name</th>
                <th>Security Rule Name</th>
                <th>Direction</th>
                <th>Action</th>
                <th>IP Addresses</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var nsg in networkSecurityGroupPageDataList)
            {
                @foreach (var secRule in nsg.SecurityRules)
                {
                    <tr>
                        <td><input type="checkbox" @onchange="(args) => setRulesToUpdate(secRule, args)" /></td>
                        <td>@nsg.Name</td>
                        <td>@secRule.Name</td>
                        <td>@secRule.Direction</td>
                        <td>@secRule.Access</td>
                        @if (secRule.SourceAddressPrefix != null)
                        {
                            <td>@secRule.SourceAddressPrefix</td>
                        }
                        else if (secRule.SourceAddressPrefixes.Count != 0)
                        {
                            @* TODO: fix up styling *@
                            <td style="padding: 0;">
                                <table>

                                    @foreach (var sourceAddressPrefix in secRule.SourceAddressPrefixes)
                                    {
                                        <tr>
                                            <td style="border: none;">@sourceAddressPrefix</td>
                                        </tr>

                                    }
                                </table>
                            </td>
                        }
                        else
                        {
                            <td>No source IP addresses found? How? It's mandatory!</td>
                        }

                    </tr>
                }

            }
        </tbody>
    </table>
    <button class="btn btn-outline-primary" @onclick="AddSourceIps">Update Rules</button>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allNsgs = await NetworkSecurityGroupService.RetrieveAllNetworkSecurityGroupsAsync();

            if (allNsgs != null)
            {
                foreach (var nsg in allNsgs)
                {
                    NetworkSecurityGroupPageData data = new NetworkSecurityGroupPageData();
                    data.Name = nsg.Name;
                    data.SecurityRules = nsg.SecurityRules.Values.ToList();

                    networkSecurityGroupPageDataList.Add(data);
                }
            }
            else
            {
                //TPDO: add UI error
                Console.WriteLine("Failed to retrieve network security groups from Azure");
            }

        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private List<NetworkSecurityGroupPageData> networkSecurityGroupPageDataList = new List<NetworkSecurityGroupPageData>();
    public class NetworkSecurityGroupPageData
    {
        public string Name;
        public List<INetworkSecurityRule> SecurityRules;
    }

    private async Task AddSourceIps()
    {
        try
        {
            if (isIpAddressValid)
            {
                await NetworkSecurityGroupService.AddSourceIpAddressToSecurityRuleAsync(rulesToUpdate.Values.ToList(), ipAddress);

            }
            else
            {
                //TPDO: add UI error
                Console.WriteLine("IP addreess was not accepted by Azure");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            //TPDO: add UI error
        }

    }

    private Dictionary<string, INetworkSecurityRule> rulesToUpdate = new Dictionary<string, INetworkSecurityRule>();
    private void setRulesToUpdate(INetworkSecurityRule secRule, ChangeEventArgs args)
    {
        // FIXME: wth how do I do this properly? is there really no 'checked' value on anything? How can I access the element itself?
        if (bool.Parse(args.Value.ToString()))
        {
            rulesToUpdate.Add(secRule.Key, secRule);
            Console.WriteLine("Added rule");
        }
        else
        {
            rulesToUpdate.Remove(secRule.Key);
            Console.WriteLine("Removed rule");
        }
        Console.WriteLine(string.Join(",", rulesToUpdate.Keys.ToArray()));
    }

    private string ipAddress = "";
    private void setInputIpAddressValue(string value)
    {
        ipAddress = value;
        validateInputIpAddressValue();
    }

    // while the ,NET IPAddress.TryParse() method does exist, there are so many caveats I'm just going with regex for now
    //FIXME: this refex allows things like 192.086.1.1 - the 0 should not be allowed here
    Regex ipV4AddressValidation = new Regex(@"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", RegexOptions.Compiled);
    //TODO: get a working CIDR check
    //Regex ipV4AddressValidationWithCidr = new Regex(@"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\/([0-9]|[1-2][0-9]|3[0-2]))?$", RegexOptions.Compiled);
    Regex ipV6AddressValidation = new Regex(@"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))
");
    bool isIpAddressValid = false;
    private void validateInputIpAddressValue()
    {
        bool isValueValid = ipV4AddressValidation.IsMatch(ipAddress) || ipV6AddressValidation.IsMatch(ipAddress);
        if (isValueValid)
        {
            isIpAddressValid = true;
        }
        else
        {
            isIpAddressValid = false;
        }
    }
}
