@page "/nsg-info"

@using Microsoft.Identity.Web
@using AzureNsgUpdater.Data
@using Microsoft.Azure.Management.Network.Fluent
@using System.Text.RegularExpressions;


@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject INetworkSecurityGroupService NetworkSecurityGroupService

<h3>NsgInfo</h3>

@if (networkSecurityGroupPageDataList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Network Security Groups</h1>
    <div class="input-group">
        <input type="text"
               class="form-control"
               placeholder="Please enter IP to add"
               pattern="@ipAddressValidation"
               @bind="@ipAddress"
               @oninput="(args) => setInputIpAddressValue(args.Value.ToString())" />
               @*@oninput="(args) => validateInputIpAddressValue(args)" />*@
    </div>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th></th>
                <th>NSG Name</th>
                <th>Security Rule Name</th>
                <th>Direction</th>
                <th>Action</th>
                <th>IP Addresses</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var nsg in networkSecurityGroupPageDataList)
            {
                @foreach (var secRule in nsg.SecurityRules)
                {
                    <tr>
                        <td><button class="btn-outline-primary" @onclick="async () => await AddSourceIp(secRule)">Add 192.168.19.19</button></td>
                        <td><input type="checkbox" @onchange="(args) => setRulesToUpdate(secRule, args)" /></td>
                        <td>@nsg.Name</td>
                        <td>@secRule.Name</td>
                        <td>@secRule.Direction</td>
                        <td>@secRule.Access</td>
                        @if (secRule.SourceAddressPrefix != null)
                        {
                            <td>@secRule.SourceAddressPrefix</td>
                        }
                        else if (secRule.SourceAddressPrefixes.Count != 0)
                        {
                            @* TODO: fix up styling *@
                            <td style="padding: 0;">
                                <table>

                                    @foreach (var sourceAddressPrefix in secRule.SourceAddressPrefixes)
                                    {
                                        <tr>
                                            <td style="border: none;">@sourceAddressPrefix</td>
                                        </tr>

                                    }
                                </table>
                            </td>
                        }
                        else
                        {
                            <td>No source IP addresses found? How? It's mandatory!</td>
                        }

                    </tr>
                }

            }
        </tbody>
    </table>
    <button @onclick="AddSourceIps">Update Rules</button>
}

@code {

    private List<NetworkSecurityGroupPageData> networkSecurityGroupPageDataList = new List<NetworkSecurityGroupPageData>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allNsgs = await NetworkSecurityGroupService.RetrieveAllNetworkSecurityGroupsAsync();

            foreach (var nsg in allNsgs)
            {
                NetworkSecurityGroupPageData data = new NetworkSecurityGroupPageData();
                data.Name = nsg.Name;
                data.SecurityRules = nsg.SecurityRules.Values.ToList();

                networkSecurityGroupPageDataList.Add(data);
            }
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    public class NetworkSecurityGroupPageData
    {
        public string Name;
        public List<INetworkSecurityRule> SecurityRules;
    }

    private async Task AddSourceIp(INetworkSecurityRule networkSecurityRule)
    {
        await NetworkSecurityGroupService.AddSourceIpAddressToSecurityRuleAsync(networkSecurityRule, "196.168.19.20");
    }

    private void AddSourceIps()
    {
        NetworkSecurityGroupService.AddSourceIpAddressToSecurityRuleAsync(rulesToUpdate.Values.ToList(), ipAddress);
    }

    private Dictionary<string, INetworkSecurityRule> rulesToUpdate = new Dictionary<string, INetworkSecurityRule>();
    private void setRulesToUpdate(INetworkSecurityRule secRule, ChangeEventArgs args)
    {
        // FIXME: wth how do I do this properly? is there really no 'checked' value on anything? How can I access the element itself?
        if (bool.Parse(args.Value.ToString()))
        {
            rulesToUpdate.Add(secRule.Key, secRule);
            Console.WriteLine("Added rule");
        }
        else
        {
            rulesToUpdate.Remove(secRule.Key);
            Console.WriteLine("Removed rule");
        }
        Console.WriteLine(string.Join(",", rulesToUpdate.Keys.ToArray()));
    }

    public string ipAddress = "";
    private void setInputIpAddressValue(string value)
    {
        Console.WriteLine("we clicked the thing");
        ipAddress = value;
        Console.WriteLine(ipAddress);
    }

    Regex ipAddressValidation = new Regex(@"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", RegexOptions.Compiled);
    //string ipAddressValidation = new Regex(@"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", RegexOptions.Compiled).ToString();
    //string ipAddressValidation = "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";
    private void validateInputIpAddressValue(ChangeEventArgs args)
    {
        
    }
}
