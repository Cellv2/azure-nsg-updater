@page "/nsg-info"

@using Microsoft.Identity.Web
@using AzureNsgUpdater.Data
@using Microsoft.Azure.Management.Network.Fluent

@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject INetworkSecurityGroupService NetworkSecurityGroupService

<h3>NsgInfo</h3>

@if (networkSecurityGroupPageDataList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Network Security Groups</h1>
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>NSG Name</th>
                <th>Security Rule Name</th>
                <th>Direction</th>
                <th>Action</th>
                <th>IP Addresses</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var nsg in networkSecurityGroupPageDataList)
            {
                @foreach (var secRule in nsg.SecurityRules)
                {
                    <tr>
                        <td><button class="btn-outline-primary" @onclick="async () => await AddSourceIp(secRule)">Add 192.168.19.19</button></td>
                        <td>@nsg.Name</td>
                        <td>@secRule.Name</td>
                        <td>@secRule.Direction</td>
                        <td>@secRule.Access</td>
                        @if (secRule.SourceAddressPrefix != null)
                        {
                            <td>@secRule.SourceAddressPrefix</td>
                        }
                        else if (secRule.SourceAddressPrefixes.Count != 0)
                        {
                            @* TODO: fix up styling *@
                            <td style="padding: 0;">
                                <table>

                                    @foreach (var sourceAddressPrefix in secRule.SourceAddressPrefixes)
                                    {
                                        <tr>
                                            <td style="border: none;">@sourceAddressPrefix</td>
                                        </tr>

                                    }
                                </table>
                            </td>
                        }
                        else
                        {
                            <td>No source IP addresses found? How? It's mandatory!</td>
                        }

                    </tr>
                }

            }
        </tbody>
    </table>
}

@code {

    private List<NetworkSecurityGroupPageData> networkSecurityGroupPageDataList = new List<NetworkSecurityGroupPageData>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allNsgs = await NetworkSecurityGroupService.RetrieveAllNetworkSecurityGroupsAsync();

            foreach (var nsg in allNsgs)
            {
                NetworkSecurityGroupPageData data = new NetworkSecurityGroupPageData();
                data.Name = nsg.Name;
                data.SecurityRules = nsg.SecurityRules.Values.ToList();

                networkSecurityGroupPageDataList.Add(data);
            }
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    public class NetworkSecurityGroupPageData
    {
        public string Name;
        public List<INetworkSecurityRule> SecurityRules;
    }

    private async Task AddSourceIp(INetworkSecurityRule networkSecurityRule)
    {
        await NetworkSecurityGroupService.AddSourceIpAddressToSecurityRuleAsync(networkSecurityRule);
    }
}
